# -*- coding: utf-8 -*-
"""EDA_NASA_TJED.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I_-DHK2aj2n7w4Bt4FqcT5PcFq9d-znr

# Exploratory Data Analysis on NASA's Turbofan Jet Engine Dataset
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_selection import VarianceThreshold

# Load with no header and space separator
df = pd.read_csv('train_FD001.txt', sep=' ', header=None)
df = df.dropna(axis=1, how='all')  # remove empty columns

# Rename columns
df.columns = ['unit', 'time_in_cycles'] + \
             [f'op_setting_{i}' for i in range(1, 4)] + \
             [f'sensor_{i}' for i in range(1, 22)]

df.head()

df.info()
df.describe().T
df['unit'].nunique()  # How many engines?

cycle_counts = df.groupby('unit')['time_in_cycles'].max()
plt.figure(figsize=(10, 4))
sns.histplot(cycle_counts, bins=30, kde=True)
plt.title('Engine Failure Cycle Distribution')
plt.xlabel('Cycle at Failure')
plt.ylabel('Engine Count')
plt.show()

rul = df.groupby('unit')['time_in_cycles'].max().reset_index()
rul.columns = ['unit', 'max_cycle']
df = df.merge(rul, on='unit')
df['RUL'] = df['max_cycle'] - df['time_in_cycles']
df.drop(columns='max_cycle', inplace=True)
df.head()

sensor_cols = [col for col in df.columns if 'sensor' in col]

df[sensor_cols].hist(bins=30, figsize=(20, 15), layout=(5, 5))
plt.suptitle('Sensor Value Distributions', fontsize=16)
plt.show()

plt.figure(figsize=(20, 20))
for i, col in enumerate(sensor_cols, 1):
    plt.subplot(7, 3, i)
    sns.boxplot(x=df[col], color='orange')
    plt.title(f'{col} Boxplot')
    plt.xlabel('')
plt.tight_layout()
plt.show()

plt.figure(figsize=(15, 12))
corr = df[sensor_cols].corr()
sns.heatmap(corr, annot=True , cmap='coolwarm', linewidths=0.5)
plt.title("Sensor Correlation Matrix")
plt.show()

# Step: Add RUL (Remaining Useful Life) to each row
rul_df = df.groupby('unit')['time_in_cycles'].max().reset_index()
rul_df.columns = ['unit', 'max_cycle']
df = df.merge(rul_df, on='unit')
df['RUL'] = df['max_cycle'] - df['time_in_cycles']
df.drop(columns=['max_cycle'], inplace=True)

# Plot a few key sensors against RUL
import matplotlib.pyplot as plt
import seaborn as sns

# Pick a few sensors to visualize ‚Äî you can change this list
selected_sensors = ['sensor_2', 'sensor_3', 'sensor_4', 'sensor_7', 'sensor_11']

plt.figure(figsize=(20, 15))

for i, sensor in enumerate(selected_sensors, 1):
    plt.subplot(3, 2, i)
    sns.scatterplot(data=df, x='RUL', y=sensor, alpha=0.3)
    plt.title(f'{sensor} vs RUL')
    plt.xlabel('RUL')
    plt.ylabel(sensor)

plt.tight_layout()
plt.show()

units = range(1, 101)
plt.figure(figsize=(10, 6))
for unit in units:
    temp = df[df['unit'] == unit]
    plt.plot(temp['time_in_cycles'], temp['RUL'])
plt.xlabel("Cycle")
plt.ylabel("Remaining Useful Life")
plt.title("RUL over Time for Selected Engines")
plt.show()

unit_df = df[df['unit'] == 5]

plt.figure(figsize=(15, 6))
for i in range(1, 6):  # Plot 5 sensors
    plt.plot(unit_df['time_in_cycles'], unit_df[f'sensor_{i}'], label=f'Sensor {i}')
plt.title('Sensor Trends Over Time for Engine 5')
plt.xlabel('Cycle')
plt.ylabel('Sensor Reading')
plt.legend()
plt.show()

from sklearn.feature_selection import VarianceThreshold

selector = VarianceThreshold(threshold=0.01)
selector.fit(df[sensor_cols])
selected_features = [sensor_cols[i] for i in range(len(sensor_cols)) if selector.get_support()[i]]

print("Selected Features:", selected_features)

"""## üîç EDA Summary

- Total Units: 100
- Max Failure Cycle: 362
- Some sensors show strong downward trends as engines age.
- Highly correlated sensors removed or reduced for modeling.
- RUL computed for each engine ‚Üí used for supervised learning later.

"""

subset = df[df['unit'] == 10][['RUL', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_11']]
sns.pairplot(subset, diag_kind='kde')
plt.suptitle("Pairwise Sensor Interactions (Engine 10)", y=1.02)

pivot_df = df.pivot(index='unit', columns='time_in_cycles', values='RUL')
plt.figure(figsize=(16, 10))
sns.heatmap(pivot_df, cmap='viridis', cbar_kws={'label': 'RUL'})
plt.title("RUL Progression for All Engines")

!pip install plotly
import plotly.express as px

sample_unit_df = df[df['unit'] == 3]
fig = px.line(sample_unit_df, x='time_in_cycles', y='sensor_11', title="Interactive Sensor 11 Over Time", labels={'time_in_cycles':'Cycle'})
fig.show()

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

X = df[sensor_cols]
y = df['RUL']

model = RandomForestRegressor(n_estimators=100)
model.fit(X, y)

importances = pd.Series(model.feature_importances_, index=sensor_cols)
importances.nlargest(10).plot(kind='barh')
plt.title("Top 10 Sensor Features for RUL Prediction")

!pip install ydata-profiling
from ydata_profiling import ProfileReport

profile = ProfileReport(df.drop(columns=['unit']), title="NASA Engine EDA", explorative=True)
profile.to_notebook_iframe()